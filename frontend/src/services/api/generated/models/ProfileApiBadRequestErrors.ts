/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProfileApiBadRequestErrors
 */
export interface ProfileApiBadRequestErrors {
    /**
     * 
     * @type {string}
     * @memberof ProfileApiBadRequestErrors
     */
    error: ProfileApiBadRequestErrorsErrorEnum;
    /**
     * 
     * @type {string}
     * @memberof ProfileApiBadRequestErrors
     */
    message?: string;
}


/**
 * @export
 */
export const ProfileApiBadRequestErrorsErrorEnum = {
    CurrentPasswordMismatch: 'CurrentPasswordMismatch',
    TransientUser: 'TransientUser',
    NotAuthenticated: 'NotAuthenticated'
} as const;
export type ProfileApiBadRequestErrorsErrorEnum = typeof ProfileApiBadRequestErrorsErrorEnum[keyof typeof ProfileApiBadRequestErrorsErrorEnum];


/**
 * Check if a given object implements the ProfileApiBadRequestErrors interface.
 */
export function instanceOfProfileApiBadRequestErrors(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "error" in value;

    return isInstance;
}

export function ProfileApiBadRequestErrorsFromJSON(json: any): ProfileApiBadRequestErrors {
    return ProfileApiBadRequestErrorsFromJSONTyped(json, false);
}

export function ProfileApiBadRequestErrorsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfileApiBadRequestErrors {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'error': json['error'],
        'message': !exists(json, 'message') ? undefined : json['message'],
    };
}

export function ProfileApiBadRequestErrorsToJSON(value?: ProfileApiBadRequestErrors | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'error': value.error,
        'message': value.message,
    };
}

