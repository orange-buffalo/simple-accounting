/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiPageIncomeTaxPaymentDto,
  EditIncomeTaxPaymentDto,
  ErrorResponse,
  IncomeTaxPaymentDto,
} from '../models';
import {
    ApiPageIncomeTaxPaymentDtoFromJSON,
    ApiPageIncomeTaxPaymentDtoToJSON,
    EditIncomeTaxPaymentDtoFromJSON,
    EditIncomeTaxPaymentDtoToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    IncomeTaxPaymentDtoFromJSON,
    IncomeTaxPaymentDtoToJSON,
} from '../models';

export interface CreateTaxPaymentRequest {
    workspaceId: number;
    editIncomeTaxPaymentDto: EditIncomeTaxPaymentDto;
}

export interface GetTaxPaymentRequest {
    workspaceId: number;
    taxPaymentId: number;
}

export interface GetTaxPaymentsRequest {
    workspaceId: number;
}

export interface UpdateTaxPaymentRequest {
    workspaceId: number;
    taxPaymentId: number;
    editIncomeTaxPaymentDto: EditIncomeTaxPaymentDto;
}

/**
 * 
 */
export class IncomeTaxPaymentsApiControllerApi extends runtime.BaseAPI {

    /**
     */
    async createTaxPaymentRaw(requestParameters: CreateTaxPaymentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<IncomeTaxPaymentDto>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling createTaxPayment.');
        }

        if (requestParameters.editIncomeTaxPaymentDto === null || requestParameters.editIncomeTaxPaymentDto === undefined) {
            throw new runtime.RequiredError('editIncomeTaxPaymentDto','Required parameter requestParameters.editIncomeTaxPaymentDto was null or undefined when calling createTaxPayment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/workspaces/{workspaceId}/income-tax-payments`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters.workspaceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditIncomeTaxPaymentDtoToJSON(requestParameters.editIncomeTaxPaymentDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeTaxPaymentDtoFromJSON(jsonValue));
    }

    /**
     */
    async createTaxPayment(requestParameters: CreateTaxPaymentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<IncomeTaxPaymentDto> {
        const response = await this.createTaxPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTaxPaymentRaw(requestParameters: GetTaxPaymentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<IncomeTaxPaymentDto>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling getTaxPayment.');
        }

        if (requestParameters.taxPaymentId === null || requestParameters.taxPaymentId === undefined) {
            throw new runtime.RequiredError('taxPaymentId','Required parameter requestParameters.taxPaymentId was null or undefined when calling getTaxPayment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/workspaces/{workspaceId}/income-tax-payments/{taxPaymentId}`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters.workspaceId))).replace(`{${"taxPaymentId"}}`, encodeURIComponent(String(requestParameters.taxPaymentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeTaxPaymentDtoFromJSON(jsonValue));
    }

    /**
     */
    async getTaxPayment(requestParameters: GetTaxPaymentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<IncomeTaxPaymentDto> {
        const response = await this.getTaxPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTaxPaymentsRaw(requestParameters: GetTaxPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ApiPageIncomeTaxPaymentDto>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling getTaxPayments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/workspaces/{workspaceId}/income-tax-payments`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters.workspaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiPageIncomeTaxPaymentDtoFromJSON(jsonValue));
    }

    /**
     */
    async getTaxPayments(requestParameters: GetTaxPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ApiPageIncomeTaxPaymentDto> {
        const response = await this.getTaxPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateTaxPaymentRaw(requestParameters: UpdateTaxPaymentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<IncomeTaxPaymentDto>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling updateTaxPayment.');
        }

        if (requestParameters.taxPaymentId === null || requestParameters.taxPaymentId === undefined) {
            throw new runtime.RequiredError('taxPaymentId','Required parameter requestParameters.taxPaymentId was null or undefined when calling updateTaxPayment.');
        }

        if (requestParameters.editIncomeTaxPaymentDto === null || requestParameters.editIncomeTaxPaymentDto === undefined) {
            throw new runtime.RequiredError('editIncomeTaxPaymentDto','Required parameter requestParameters.editIncomeTaxPaymentDto was null or undefined when calling updateTaxPayment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/workspaces/{workspaceId}/income-tax-payments/{taxPaymentId}`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters.workspaceId))).replace(`{${"taxPaymentId"}}`, encodeURIComponent(String(requestParameters.taxPaymentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditIncomeTaxPaymentDtoToJSON(requestParameters.editIncomeTaxPaymentDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeTaxPaymentDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateTaxPayment(requestParameters: UpdateTaxPaymentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<IncomeTaxPaymentDto> {
        const response = await this.updateTaxPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
