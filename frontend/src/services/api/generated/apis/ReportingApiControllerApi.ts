/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GeneralTaxReportDto,
} from '../models/index';
import {
    GeneralTaxReportDtoFromJSON,
    GeneralTaxReportDtoToJSON,
} from '../models/index';

export interface GetGeneralTaxReportRequest {
    workspaceId: number;
    fromDate: Date;
    toDate: Date;
}

/**
 * 
 */
export class ReportingApiControllerApi extends runtime.BaseAPI {

    /**
     */
    async getGeneralTaxReportRaw(requestParameters: GetGeneralTaxReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeneralTaxReportDto>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getGeneralTaxReport().'
            );
        }

        if (requestParameters['fromDate'] == null) {
            throw new runtime.RequiredError(
                'fromDate',
                'Required parameter "fromDate" was null or undefined when calling getGeneralTaxReport().'
            );
        }

        if (requestParameters['toDate'] == null) {
            throw new runtime.RequiredError(
                'toDate',
                'Required parameter "toDate" was null or undefined when calling getGeneralTaxReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fromDate'] != null) {
            queryParameters['fromDate'] = (requestParameters['fromDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['toDate'] != null) {
            queryParameters['toDate'] = (requestParameters['toDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/workspaces/{workspaceId}/reporting/general-taxes`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeneralTaxReportDtoFromJSON(jsonValue));
    }

    /**
     */
    async getGeneralTaxReport(requestParameters: GetGeneralTaxReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeneralTaxReportDto> {
        const response = await this.getGeneralTaxReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
