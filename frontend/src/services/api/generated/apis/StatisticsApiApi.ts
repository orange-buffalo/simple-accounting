/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IncomeTaxPaymentsStatisticsDto,
  IncomesExpensesStatisticsDto,
} from '../models/index';
import {
    IncomeTaxPaymentsStatisticsDtoFromJSON,
    IncomeTaxPaymentsStatisticsDtoToJSON,
    IncomesExpensesStatisticsDtoFromJSON,
    IncomesExpensesStatisticsDtoToJSON,
} from '../models/index';

export interface GetCurrenciesShortlistRequest {
    workspaceId: number;
}

export interface GetExpensesStatisticsRequest {
    workspaceId: number;
    fromDate: Date;
    toDate: Date;
}

export interface GetIncomesStatisticsRequest {
    workspaceId: number;
    fromDate: Date;
    toDate: Date;
}

export interface GetTaxPaymentsStatisticsRequest {
    workspaceId: number;
    fromDate: Date;
    toDate: Date;
}

/**
 * 
 */
export class StatisticsApiApi extends runtime.BaseAPI {

    /**
     */
    async getCurrenciesShortlistRaw(requestParameters: GetCurrenciesShortlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getCurrenciesShortlist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/workspaces/{workspaceId}/statistics/currencies-shortlist`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getCurrenciesShortlist(requestParameters: GetCurrenciesShortlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getCurrenciesShortlistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getExpensesStatisticsRaw(requestParameters: GetExpensesStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomesExpensesStatisticsDto>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getExpensesStatistics().'
            );
        }

        if (requestParameters['fromDate'] == null) {
            throw new runtime.RequiredError(
                'fromDate',
                'Required parameter "fromDate" was null or undefined when calling getExpensesStatistics().'
            );
        }

        if (requestParameters['toDate'] == null) {
            throw new runtime.RequiredError(
                'toDate',
                'Required parameter "toDate" was null or undefined when calling getExpensesStatistics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fromDate'] != null) {
            queryParameters['fromDate'] = (requestParameters['fromDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['toDate'] != null) {
            queryParameters['toDate'] = (requestParameters['toDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/workspaces/{workspaceId}/statistics/expenses`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomesExpensesStatisticsDtoFromJSON(jsonValue));
    }

    /**
     */
    async getExpensesStatistics(requestParameters: GetExpensesStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomesExpensesStatisticsDto> {
        const response = await this.getExpensesStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getIncomesStatisticsRaw(requestParameters: GetIncomesStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomesExpensesStatisticsDto>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getIncomesStatistics().'
            );
        }

        if (requestParameters['fromDate'] == null) {
            throw new runtime.RequiredError(
                'fromDate',
                'Required parameter "fromDate" was null or undefined when calling getIncomesStatistics().'
            );
        }

        if (requestParameters['toDate'] == null) {
            throw new runtime.RequiredError(
                'toDate',
                'Required parameter "toDate" was null or undefined when calling getIncomesStatistics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fromDate'] != null) {
            queryParameters['fromDate'] = (requestParameters['fromDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['toDate'] != null) {
            queryParameters['toDate'] = (requestParameters['toDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/workspaces/{workspaceId}/statistics/incomes`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomesExpensesStatisticsDtoFromJSON(jsonValue));
    }

    /**
     */
    async getIncomesStatistics(requestParameters: GetIncomesStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomesExpensesStatisticsDto> {
        const response = await this.getIncomesStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTaxPaymentsStatisticsRaw(requestParameters: GetTaxPaymentsStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeTaxPaymentsStatisticsDto>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getTaxPaymentsStatistics().'
            );
        }

        if (requestParameters['fromDate'] == null) {
            throw new runtime.RequiredError(
                'fromDate',
                'Required parameter "fromDate" was null or undefined when calling getTaxPaymentsStatistics().'
            );
        }

        if (requestParameters['toDate'] == null) {
            throw new runtime.RequiredError(
                'toDate',
                'Required parameter "toDate" was null or undefined when calling getTaxPaymentsStatistics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fromDate'] != null) {
            queryParameters['fromDate'] = (requestParameters['fromDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['toDate'] != null) {
            queryParameters['toDate'] = (requestParameters['toDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/workspaces/{workspaceId}/statistics/income-tax-payments`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeTaxPaymentsStatisticsDtoFromJSON(jsonValue));
    }

    /**
     */
    async getTaxPaymentsStatistics(requestParameters: GetTaxPaymentsStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeTaxPaymentsStatisticsDto> {
        const response = await this.getTaxPaymentsStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
