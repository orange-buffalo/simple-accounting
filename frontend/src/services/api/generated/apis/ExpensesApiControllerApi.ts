/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiPageExpenseDto,
  EditExpenseDto,
  ErrorResponse,
  ExpenseDto,
} from '../models';
import {
    ApiPageExpenseDtoFromJSON,
    ApiPageExpenseDtoToJSON,
    EditExpenseDtoFromJSON,
    EditExpenseDtoToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ExpenseDtoFromJSON,
    ExpenseDtoToJSON,
} from '../models';

export interface CreateExpenseRequest {
    workspaceId: number;
    editExpenseDto: EditExpenseDto;
}

export interface GetExpenseRequest {
    workspaceId: number;
    expenseId: number;
}

export interface GetExpensesRequest {
    workspaceId: number;
}

export interface UpdateExpenseRequest {
    workspaceId: number;
    expenseId: number;
    editExpenseDto: EditExpenseDto;
}

/**
 * 
 */
export class ExpensesApiControllerApi extends runtime.BaseAPI {

    /**
     */
    async createExpenseRaw(requestParameters: CreateExpenseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ExpenseDto>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling createExpense.');
        }

        if (requestParameters.editExpenseDto === null || requestParameters.editExpenseDto === undefined) {
            throw new runtime.RequiredError('editExpenseDto','Required parameter requestParameters.editExpenseDto was null or undefined when calling createExpense.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/workspaces/{workspaceId}/expenses`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters.workspaceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditExpenseDtoToJSON(requestParameters.editExpenseDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseDtoFromJSON(jsonValue));
    }

    /**
     */
    async createExpense(requestParameters: CreateExpenseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ExpenseDto> {
        const response = await this.createExpenseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getExpenseRaw(requestParameters: GetExpenseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ExpenseDto>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling getExpense.');
        }

        if (requestParameters.expenseId === null || requestParameters.expenseId === undefined) {
            throw new runtime.RequiredError('expenseId','Required parameter requestParameters.expenseId was null or undefined when calling getExpense.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/workspaces/{workspaceId}/expenses/{expenseId}`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters.workspaceId))).replace(`{${"expenseId"}}`, encodeURIComponent(String(requestParameters.expenseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getExpense(requestParameters: GetExpenseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ExpenseDto> {
        const response = await this.getExpenseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getExpensesRaw(requestParameters: GetExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ApiPageExpenseDto>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling getExpenses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/workspaces/{workspaceId}/expenses`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters.workspaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiPageExpenseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getExpenses(requestParameters: GetExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ApiPageExpenseDto> {
        const response = await this.getExpensesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateExpenseRaw(requestParameters: UpdateExpenseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ExpenseDto>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling updateExpense.');
        }

        if (requestParameters.expenseId === null || requestParameters.expenseId === undefined) {
            throw new runtime.RequiredError('expenseId','Required parameter requestParameters.expenseId was null or undefined when calling updateExpense.');
        }

        if (requestParameters.editExpenseDto === null || requestParameters.editExpenseDto === undefined) {
            throw new runtime.RequiredError('editExpenseDto','Required parameter requestParameters.editExpenseDto was null or undefined when calling updateExpense.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/workspaces/{workspaceId}/expenses/{expenseId}`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters.workspaceId))).replace(`{${"expenseId"}}`, encodeURIComponent(String(requestParameters.expenseId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditExpenseDtoToJSON(requestParameters.editExpenseDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateExpense(requestParameters: UpdateExpenseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ExpenseDto> {
        const response = await this.updateExpenseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
