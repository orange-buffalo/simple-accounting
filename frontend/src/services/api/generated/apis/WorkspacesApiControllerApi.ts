/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateWorkspaceDto,
  EditWorkspaceDto,
  ErrorResponse,
  SaveSharedWorkspaceRequestDto,
  WorkspaceDto,
} from '../models';
import {
    CreateWorkspaceDtoFromJSON,
    CreateWorkspaceDtoToJSON,
    EditWorkspaceDtoFromJSON,
    EditWorkspaceDtoToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SaveSharedWorkspaceRequestDtoFromJSON,
    SaveSharedWorkspaceRequestDtoToJSON,
    WorkspaceDtoFromJSON,
    WorkspaceDtoToJSON,
} from '../models';

export interface CreateWorkspaceRequest {
    createWorkspaceDto: CreateWorkspaceDto;
}

export interface EditWorkspaceRequest {
    workspaceId: number;
    editWorkspaceDto: EditWorkspaceDto;
}

export interface SaveSharedWorkspaceRequest {
    saveSharedWorkspaceRequestDto: SaveSharedWorkspaceRequestDto;
}

/**
 * 
 */
export class WorkspacesApiControllerApi<RM = void> extends runtime.BaseAPI<RM> {

    /**
     */
    async createWorkspaceRaw<T extends RequestInit & RM>(requestParameters: CreateWorkspaceRequest, initOverrides?: T | runtime.InitOverrideFunction<T, RM>): Promise<runtime.ApiResponse<WorkspaceDto>> {
        if (requestParameters.createWorkspaceDto === null || requestParameters.createWorkspaceDto === undefined) {
            throw new runtime.RequiredError('createWorkspaceDto','Required parameter requestParameters.createWorkspaceDto was null or undefined when calling createWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/workspaces`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWorkspaceDtoToJSON(requestParameters.createWorkspaceDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceDtoFromJSON(jsonValue));
    }

    /**
     */
    async createWorkspace<T extends RequestInit & RM>(requestParameters: CreateWorkspaceRequest, initOverrides?: T | runtime.InitOverrideFunction<T, RM>): Promise<WorkspaceDto> {
        const response = await this.createWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async editWorkspaceRaw<T extends RequestInit & RM>(requestParameters: EditWorkspaceRequest, initOverrides?: T | runtime.InitOverrideFunction<T, RM>): Promise<runtime.ApiResponse<WorkspaceDto>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling editWorkspace.');
        }

        if (requestParameters.editWorkspaceDto === null || requestParameters.editWorkspaceDto === undefined) {
            throw new runtime.RequiredError('editWorkspaceDto','Required parameter requestParameters.editWorkspaceDto was null or undefined when calling editWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/workspaces/{workspaceId}`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters.workspaceId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditWorkspaceDtoToJSON(requestParameters.editWorkspaceDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceDtoFromJSON(jsonValue));
    }

    /**
     */
    async editWorkspace<T extends RequestInit & RM>(requestParameters: EditWorkspaceRequest, initOverrides?: T | runtime.InitOverrideFunction<T, RM>): Promise<WorkspaceDto> {
        const response = await this.editWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSharedWorkspacesRaw<T extends RequestInit & RM>(initOverrides?: T | runtime.InitOverrideFunction<T, RM>): Promise<runtime.ApiResponse<Array<WorkspaceDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/shared-workspaces`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkspaceDtoFromJSON));
    }

    /**
     */
    async getSharedWorkspaces<T extends RequestInit & RM>(initOverrides?: T | runtime.InitOverrideFunction<T, RM>): Promise<Array<WorkspaceDto>> {
        const response = await this.getSharedWorkspacesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getWorkspacesRaw<T extends RequestInit & RM>(initOverrides?: T | runtime.InitOverrideFunction<T, RM>): Promise<runtime.ApiResponse<Array<WorkspaceDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/workspaces`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkspaceDtoFromJSON));
    }

    /**
     */
    async getWorkspaces<T extends RequestInit & RM>(initOverrides?: T | runtime.InitOverrideFunction<T, RM>): Promise<Array<WorkspaceDto>> {
        const response = await this.getWorkspacesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async saveSharedWorkspaceRaw<T extends RequestInit & RM>(requestParameters: SaveSharedWorkspaceRequest, initOverrides?: T | runtime.InitOverrideFunction<T, RM>): Promise<runtime.ApiResponse<WorkspaceDto>> {
        if (requestParameters.saveSharedWorkspaceRequestDto === null || requestParameters.saveSharedWorkspaceRequestDto === undefined) {
            throw new runtime.RequiredError('saveSharedWorkspaceRequestDto','Required parameter requestParameters.saveSharedWorkspaceRequestDto was null or undefined when calling saveSharedWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/shared-workspaces`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveSharedWorkspaceRequestDtoToJSON(requestParameters.saveSharedWorkspaceRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceDtoFromJSON(jsonValue));
    }

    /**
     */
    async saveSharedWorkspace<T extends RequestInit & RM>(requestParameters: SaveSharedWorkspaceRequest, initOverrides?: T | runtime.InitOverrideFunction<T, RM>): Promise<WorkspaceDto> {
        const response = await this.saveSharedWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
