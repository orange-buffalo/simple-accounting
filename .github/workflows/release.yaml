name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version to set. If not provided, the current version''s patch version will be incremented.'
        required: false
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: "Set up JDK"
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: 'Set up Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: 16

      - name: Build Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.cache/google-cloud-tools-java/jib
            app/build/jib-cache
          # workaround for https://github.com/actions/cache/issues/342
          # generate new key for each build to force cache push
          key: build-cache-${{ github.run_id }}
          # but use restore key to restore the latest pushed cache
          restore-keys: |
            build-cache-

      - name: Calculate new version
        id: calculate_new_version
        run: |
          latest_tag=$(git describe --tags --match "v*" --abbrev=0 $(git rev-list --tags --max-count=1))
          if [[ -n "${{ github.event.inputs.version }}" ]]; then
            version="${{ github.event.inputs.version }}"
            if [[ ! $version == v* ]]; then
              version="v$version"
            fi
          else
            version=$(echo $latest_tag | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          fi
          echo "previous_version=$latest_tag" >> "$GITHUB_OUTPUT"
          echo "previous_release=${latest_tag#v}" >> "$GITHUB_OUTPUT"
          echo "new_version=$version" >> "$GITHUB_OUTPUT"
          echo "new_release=${version#v}" >> "$GITHUB_OUTPUT"

      - name: Create tag
        run: |
          gh_actor_profile="$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/users/${GITHUB_ACTOR}")"
          git config --global user.name "$(printf '%s' "$gh_actor_profile" | jq -r .name)"
          git config --global user.email "$(printf '%s' "$gh_actor_profile" | jq -r .email)"
          git status
          git tag "${{ steps.calculate_new_version.outputs.new_version }}"

      - name: Build
        env:
          VERSIONING_GIT_REF: "refs/tags/${{ steps.calculate_new_version.outputs.new_version }}"
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: ./gradlew assemble --scan --console=plain --build-cache

      - name: "Test"
        env:
          VERSIONING_GIT_REF: "refs/tags/${{ steps.calculate_new_version.outputs.new_version }}"
        run: ./gradlew check --scan --console=plain --build-cache

      - name: "Test (screenshots)"
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          VERSIONING_GIT_REF: "refs/tags/${{ steps.calculate_new_version.outputs.new_version }}"
        run: ./gradlew screenshotsTest --scan --console=plain --build-cache

      - name: "Test (end-to-end)"
        env:
          VERSIONING_GIT_REF: "refs/tags/${{ steps.calculate_new_version.outputs.new_version }}"
        run: ./gradlew e2eTest --scan --console=plain --build-cache

      - name: "Save Tests Results"
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: Tests Results
          path: "**/build/reports/tests/**/"
          if-no-files-found: "ignore"

      - name: "Save Failed Screenshots"
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: Screenshots Diff Files
          path: app/build/screenshotsTest
          if-no-files-found: "ignore"

      - name: "Publish"
        env:
          VERSIONING_GIT_REF: "refs/tags/${{ steps.calculate_new_version.outputs.new_version }}"
        run: |
            ./gradlew jib \
              --scan --console=plain \
              -Djib.to.auth.username=orangebuffalo \
              -Djib.to.auth.password="${{ secrets.dockerhub_token }}"

      - name: "Push Version Tag"
        run: |
          echo "Pushing tags to remote"
          remote_repo="https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"
          git push "${remote_repo}" --tags
          echo -e "\nPushed"

      - name: Create changelog text
        id: changelog
        uses: loopwerk/tag-changelog@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.calculate_new_version.outputs.new_version }}
          name: ${{ steps.calculate_new_version.outputs.new_release }}
          body: ${{ steps.changelog.outputs.changes }}
          draft: true
