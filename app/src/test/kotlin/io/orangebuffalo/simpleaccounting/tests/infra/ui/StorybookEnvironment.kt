package io.orangebuffalo.simpleaccounting.tests.infra.ui

import com.fasterxml.jackson.databind.DeserializationFeature
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import com.fasterxml.jackson.module.kotlin.readValue
import com.microsoft.playwright.Browser
import com.microsoft.playwright.BrowserType.LaunchOptions
import com.microsoft.playwright.Page
import com.microsoft.playwright.Playwright
import io.orangebuffalo.simpleaccounting.tests.infra.environment.TestConfig
import io.orangebuffalo.simpleaccounting.tests.infra.utils.KNginxContainer
import org.testcontainers.containers.BindMode
import org.testcontainers.containers.wait.strategy.HttpWaitStrategy
import java.io.File
import java.net.URI
import java.util.concurrent.CopyOnWriteArrayList

private const val storybookDirectory = "../frontend/build/storybook"

private val nginx = KNginxContainer("nginx:1.22")
    .withCustomContent(storybookDirectory)
    .waitingFor(HttpWaitStrategy())
    .withExposedPorts(80)
    // nginx does not support mjs generated by storybook, overriding config to enable it
    .withClasspathResourceMapping("/nginx.conf", "/etc/nginx/nginx.conf", BindMode.READ_ONLY)
    .also {
        if (TestConfig.instance.screenshots.useCompliedStorybook) {
            it.start()
        }
    }

object StorybookEnvironment {
    val stories: Collection<StorybookStory>
    private val playwrights: MutableList<Playwright> = CopyOnWriteArrayList()
    private val threadLocalPage: ThreadLocal<Page> = ThreadLocal()

    init {
        val storiesJsonUri = if (TestConfig.instance.screenshots.useCompliedStorybook)
            File(storybookDirectory, "stories.json").toURI()
        else URI("http://localhost:6006/stories.json")

        val data: StorybookStoriesFileData = jacksonObjectMapper()
            .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES).readValue(storiesJsonUri.toURL())
        stories = data.stories.values
    }

    val page: Page
        get() {
            if (threadLocalPage.get() == null) {
                val playwright = Playwright.create()
                playwrights.add(playwright)
                val context = playwright.chromium()
                    .launch(LaunchOptions().setHeadless(true))
                    .newContext(
                        Browser.NewContextOptions()
                            .setBaseURL(
                                if (TestConfig.instance.screenshots.useCompliedStorybook)
                                    "http://localhost:${nginx.getMappedPort(80)}/"
                                else "http://localhost:6006/"
                            )
                            .setViewportSize(1358, 687)
                    )
                val page = context.newPage()
                threadLocalPage.set(page)
            }
            return threadLocalPage.get() ?: throw IllegalStateException("Page is not initialized")
        }

    fun cleanup() {
        playwrights.forEach { it.close() }
        playwrights.clear()
    }
}

data class StorybookStory(
    val title: String,
    val name: String,
    val id: String,
)

private data class StorybookStoriesFileData(
    val stories: Map<String, StorybookStory>
)
