"GraphQL schema for Simple Accounting application"
schema @contact(description : "For any questions, issues or feature requests, please open an issue or discussion on GitHub.", name : "Simple Accounting", url : "https://github.com/orange-buffalo/simple-accounting/issues"){
  query: Query
}

"Defines the authorization requirements for the request. If a request context does not satisfy the requirements, it will be rejected with an error code `NOT_AUTHORIZED`."
directive @auth(type: AuthType!) on FIELD_DEFINITION

"Provides contact information of the owner responsible for this subgraph schema."
directive @contact(description: String!, name: String!, url: String!) on SCHEMA

"This directive allows results to be deferred during execution"
directive @defer(
    "Deferred behaviour is controlled by this argument"
    if: Boolean! = true,
    "A unique label that represents the fragment being deferred"
    label: String
  ) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String! = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"This directive disables error propagation when a non nullable field returns null for the given operation."
directive @experimental_disableErrorPropagation on QUERY | MUTATION | SUBSCRIPTION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Indicates an Input Object is a OneOf Input Object."
directive @oneOf on INPUT_OBJECT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

"Internationalization settings of the user profile."
type I18nSettings {
  "The language of the user profile, e.g. 'en'. Used for translations."
  language: String!
  "The locale of the user profile, e.g. 'en-US'. Used for formatting dates, numbers, etc."
  locale: String!
}

type Query {
  "Returns the current user profile information. Current is defined as the user that is authenticated in the current request."
  userProfile: UserProfile! @auth(type : AUTHENTICATED_USER)
}

"Information about the user profile."
type UserProfile {
  "The identifier of the documents storage used by the user."
  documentsStorage: String
  "Internationalization settings of the user."
  i18n: I18nSettings!
  "The user name / login of the user."
  userName: String!
}

"Defines the type of authorization required to execute the request. This is used in conjunction with the `@auth` directive."
enum AuthType {
  "Requires a request to be executed by an admin user, i.e. authenticated and has admin privileges."
  ADMIN_USER
  "Allows a request to be executed by an anonymous user, i.e. not authenticated at all. With this restriction, any authenticated user is allowed to execute the request too. "
  ANONYMOUS
  "Allows a request to be executed by any authenticated actor, including by workspace access token."
  AUTHENTICATED_ACTOR
  "Allows a request to be executed by any authenticated user, be it admin or regular user, but not via workspace access token."
  AUTHENTICATED_USER
  "Requires a request to be executed by a regular user, i.e. authenticated and not an admin user."
  REGULAR_USER
}
