buildscript {
    ext {
        kotlinVersion = '1.3.11'
        springBootVersion = '2.1.1.RELEASE'
        coroutinesVersion = '1.0.1'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin-kapt'

group = 'io.orangebuffalo.accounting'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencyManagement {
    implementation {
        imports {
            mavenBom 'org.junit:junit-bom:5.2.0'
        }
    }
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-webflux')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
    compile('org.jetbrains.kotlin:kotlin-reflect')
    compile('io.github.microutils:kotlin-logging:1.6.10')
    compile('io.jsonwebtoken:jjwt-api:0.10.5')
    compile('com.querydsl:querydsl-jpa:4.2.1')
    compile('com.github.kittinunf.result:result:1.5.0') //todo use arrow
    compile("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")
    compile("org.jetbrains.kotlinx:kotlinx-coroutines-reactive:$coroutinesVersion")
    compile("org.jetbrains.kotlinx:kotlinx-coroutines-reactor:$coroutinesVersion")
    compile('com.google.api-client:google-api-client:1.23.0')
    compile('com.google.apis:google-api-services-drive:v3-rev110-1.23.0')

    kapt('com.querydsl:querydsl-apt:4.2.1:jpa')
    kapt('org.springframework.boot:spring-boot-configuration-processor')

    runtime('org.flywaydb:flyway-core')
    runtime('com.h2database:h2')
    runtime('io.jsonwebtoken:jjwt-impl:0.10.5')
    runtime('io.jsonwebtoken:jjwt-jackson:0.10.5')
    runtime('org.glassfish:javax.el:3.0.1-b10')

    compileOnly('org.projectlombok:lombok')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('io.projectreactor:reactor-test')
    testCompile('org.junit.jupiter:junit-jupiter-api')
    testCompile('org.springframework.security:spring-security-test')
    testCompile('net.javacrumbs.json-unit:json-unit-assertj:2.0.2')
    testCompile('com.nhaarman:mockito-kotlin:1.6.0')
    testCompile('org.mockito:mockito-junit-jupiter:2.21.0')
    testCompile('org.flywaydb:flyway-core')
    testRuntime('org.junit.jupiter:junit-jupiter-engine')
}

sourceSets {
    main {
        // TODO add task dependency later, to speed up builds in development it is disabled
        output.dir("$buildDir/generated-resources/main")
//        output.dir("$buildDir/generated-resources/main", builtBy: 'copyFrontend')
    }
}

task copyFrontend(type: DefaultTask) {
    copy {
        from project(':frontend').file('dist')
        exclude 'admin/**'
        exclude 'app/**'
        into "$buildDir/generated-resources/main/META-INF/resources"
    }

    copy {
        from project(':frontend').file('dist')
        include 'admin/**'
        include 'app/**'
        into "$buildDir/generated-resources/main/META-INF/pages"
    }

    dependsOn ':frontend:build'
}

test {
    useJUnitPlatform()

    beforeTest { descriptor ->
        logger.lifecycle("Running test: $descriptor")
    }
}